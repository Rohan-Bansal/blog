{"meta":{"title":"Apollo | Rohan Bansal","subtitle":"Rohan Bansal","description":"My musings, experiences, and tech talks","author":"Rohan Bansal","url":"http://blog.rohanbansal.me","root":"/"},"pages":[{"title":"","date":"2020-07-03T22:46:31.201Z","updated":"2020-07-03T22:46:31.201Z","comments":true,"path":"README.html","permalink":"http://blog.rohanbansal.me/README","excerpt":"","text":"Apollo - The BlogThis is my blog! I talk about a lot of random things (musings, experiences, tech) Have fun reading!"},{"title":"about","date":"2020-08-30T20:20:23.000Z","updated":"2020-08-30T20:20:23.172Z","comments":true,"path":"about/index.html","permalink":"http://blog.rohanbansal.me/about/","excerpt":"","text":""},{"title":"Links","date":"2020-05-18T04:08:18.000Z","updated":"2020-05-25T00:48:17.439Z","comments":true,"path":"links/index.html","permalink":"http://blog.rohanbansal.me/links/","excerpt":"","text":"Just a list of links (not the silent elf with a hat). My Information Github: rohan-bansal LinkedIn: bansal-rohan Reddit: mastrcookie KeyBase: rohan_bansal Art My Art Assets: assets Code Awesome Linux: linux DevRant: devrant Code Books: awesome-programming OpenGL Guide #1 opengl Guide #2 opengl Kha Engine: kha Flambe Engine: flambe Flutter Flutter Cookbook: cookbook Flutter GitBook: gitbook Linux Souce Tree: source Ventoy USB Boot: ventoy Coding Interview List: list All English Words: words Fun GitHub Games: games Reading/Books Epic Fantasy: awesome-fantasy Book Torrent Downloader: library-genesis XKCD: xkcd"},{"title":"tags","date":"2020-08-30T20:21:57.000Z","updated":"2020-08-30T20:21:57.039Z","comments":true,"path":"tags/index.html","permalink":"http://blog.rohanbansal.me/tags/","excerpt":"","text":""},{"title":"Subscribe","date":"2020-08-30T20:43:52.000Z","updated":"2020-08-30T20:46:50.384Z","comments":true,"path":"subscribe/index.html","permalink":"http://blog.rohanbansal.me/subscribe/","excerpt":"","text":"If you want to read my posts as soon as they release, subscribe to my newsletter!"}],"posts":[{"title":"Workshop - Meme Songs With Arduino","slug":"Workshop-Meme-Songs-With-Arduino","date":"2020-10-28T03:11:58.000Z","updated":"2020-10-28T03:13:00.083Z","comments":true,"path":"2020/10/27/Workshop-Meme-Songs-With-Arduino/","link":"","permalink":"http://blog.rohanbansal.me/2020/10/27/Workshop-Meme-Songs-With-Arduino/","excerpt":"","text":"Meme Songs with Arduino OverviewMeme songs are everywhere! I bet you (the reader) have been rickrolled at least once, or heard All Star/the Coffin Dance around the internet. In this beginner workshop, you’ll be building/coding an Arduino circuit that will be able to play music! We are going to use Tinkercad’s interactive circuit builder, which is excellent; it’s like building an Arduino circuit in real life. With the expertise you gain from building this circuit online, recreating it with physical components should be a breeze! What You’ll Learn How to wire a circuit, taking into account ground/power/signal How to code in the Arduino C language What You’ll Need Extremely basic knowledge of any programming language, does not have to be Arduino C Basic knowledge of music notes Final Circuit Here’s the demo/final code: demo SetupLet’s get started! Head over to tinkercad and register for an account in the top right. You should then be redirected to a dashboard, at which point you can create a new circuit diagram. Refer to the GIF below if you’re having trouble: The Physics of MusicMusic, in general terms, can be described as sound. Very pleasant, bop-worthy sound! If we were to abstract sound even further, it can be thought of as waves that look like this: Basic science lesson time! The humps of the wave are called wave crests, and the valley are troughs. Wavelength is the distance between two adjacent crests on the wave. The important part, though, is the frequency. This is how many times a wavelength passes a fixed point in a given amount of time–frequency is measured in hertz. What’s the point, you say? The frequency of the wave is directly related to what you hear! The higher the frequency, the higher the pitch, and vice versa. This forms the basis for music notes. This is important because Arduino has no idea what a music note is, and neither does the buzzer we’ll be programming. To specify what note we want to play, we need to give Arduino the hertz value. For example, the note C4 is about 261.6 hz! For a full list of notes and their frequencies, check out this link. We’ll be using that list soon to arrange the coffin dance. Building the CircuitNow that we have a new project window open, you’ll see multiple things: Here’s a rundown of the items in each rectangle, from left to right: Red : the name/title of your project Green : a few actions pertinent to devices, such as rotate, delete, undo/redo, etc. Blue : the code window toggle button, simulate button, and methods to export/share Yellow: the components window with a huge variety of devices to use Now, we have to do two things to start off. Rename the project by clicking the name in the top left, and drag in an Arduino from the left components bar! We also need to add the components that will be making music in the first place–piezos! Piezo is short for piezoelectric speaker, an oscillating circuit that projects a sound wave. Go ahead drag two piezos into the main view, along with two resistors. If you can’t find them, use the search bar. You should have this so far: Like any electrical device, a circuit needs to be completed to activate it. In the piezo’s case, it needs a signal (aka power) and ground. Ground always connects to the Arduino’s ground port (next to pin 13 at the top of the board), but since a signal is variable, it can be connected to any of the digital pins. I won’t go into detail about digital pins and analog pins, but you can definitely learn more here. All you need to know for this workshop is that the hertz value inputted into code is going to be sent over the signal pin to the piezo. Next, we need to configure the resistors to the right resistance value. This ensures the signal sent to the piezos does not exceed a certain limit and is smooth. Click both resistors and change the resistance values in the box in the top right to the below: You can ignore the name field, as that isn’t important to the circuit, just for labeling purposes. Make sure that the dropdown is set to plain ohms (symbol for electrical resistance). It’s time to wire up the circuit! By clicking a port on either the piezo, resistor, or Arduino, you should be able to create a wire. Wire the circuit as below: Let’s go over the elements of this diagram. Following pin 6, the signal wire first connects to a resistor, which connects to one piezo’s signal input. The piezo’s other port routes the electricity to ground, completing the circuit. The mini-circuit is the same for pin 7! Don’t be intimidated by electronics, in hindsight it can be very simple. Hooray! You finished building the circuit. Time to play some meme music! Programming the CircuitRemember the code window toggle button in the blue rectangle in the picture earlier? Go ahead and click that and toggle from block code to text code. Here’s how to do that: We’re now ready to start coding! Go ahead and delete everything in the window and type out the following: 1234567void setup() &#123; &#125;void loop() &#123; &#125; The setup() function is only run once during the entire runtime: at the beginning. You can think of it as setting up the program for what’s to come. The loop() function is run probably hundreds of times a second! It loops repeatedly, until the program either crashes or decidedly ends. For the purposes of this workshop, you don’t need to know what void does; if you want to, check this out: identifier (the link takes you to a Java tutorial, but in terms of identifiers, everything is the same) In the setup() function, we have to do 2 things: tell the Arduino we’re going to use pin 6 tell the Arduino we’re going to use pin 7 To do this, we need to specify that both those pins are going to be outputs, not inputs (since we’re transmitting sound from the Arduino to the piezos): 1234void setup() &#123; pinMode(6, OUTPUT); pinMode(7, OUTPUT);&#125; There are multiple pin modes besides OUTPUT, we just won’t use them for this workshop. To learn more, check out this link. Let’s try making some basic sounds! In the loop() function, add the following and hit the Start Simulation button when done. You should hear one note being played repeatedly! 123456void loop() &#123; tone(6, 261, 1000); delay(1000); noTone(6); delay(200);&#125; Line by line: we call a built-in tone function that takes the following as parameters (left to right): pin number, hertz (note), duration (milliseconds) delay the program by 1000 milliseconds to allow the tone to play out disable the tone from the piezo connected to pin 6 delay again for 200 milliseconds to allow for a grace period between notes Now, the point of having two piezos is for the sound to alternate between them! To do this, we need to keep track of the current speaker being used. Go ahead and add a variable that does this at the very top of the file, we’ll come back to it later: 12345678910111213int currentSpeaker = 6;void setup()&#123; pinMode(6, OUTPUT); pinMode(7, OUTPUT);&#125;void loop() &#123; tone(6, 261, 1000); delay(1000); noTone(6); delay(200);&#125; This code works, and we can by all means create a song with this, but typing out four lines per note is going to be a major hassle. This is where functions, reusable pieces of code, come in! Let’s create a new function underneath setup() , called play() that takes in two values, hertz and wait time in milliseconds. 123void play(float hz, int wait) &#123; &#125; Let’s also assume we’re only going to be using the piezo on pin 6 for now. Add the following inside the play() function: 123456void play(float hz, int wait) &#123; tone(6, hz, 1000); delay(200); noTone(6); delay(wait);&#125; What did we do here? Since we’re only using the piezo on pin 6, why do we have to specify it all the time? To make our lives easier, we can add that manually to the function so when we call play(), no pin number is required. We also assume the delay and note length, as those will probably stay constant during this workshop. Let’s test this function out! Delete all the code inside loop() , and add this instead: 123void loop() &#123; play(261, 500);&#125; Hit the Start Simulation button, and you should hear a note playing repeatedly. This time, we only did it in one line! How can we modify this now to alternate sounds between both piezos? Using if statements! Modify your play() function as below: 12345678910111213void play(float hz, int wait) &#123; tone(currentSpeaker, hz, 1000); delay(200); noTone(currentSpeaker); delay(wait); if(currentSpeaker == 6) &#123; currentSpeaker += 1; &#125; else &#123; currentSpeaker -= 1; &#125; &#125; What did we do here? Instead of setting the piezo manually, we have the currentSpeaker variable do it for us! Since the variable is set to either 6 or 7, it’s just a matter of switching between them every time the function is called. This is done with the if statement at the end; if the value is 6, it changes it to 7, and if it’s 7, it changes it back to 6. Hit Start Simulation once more and you should see the sounds alternating from both piezos! The hard part is done, let’s make some music now! Referring to this link with all the possible notes and frequencies, here’s how to play the coffin dance (replace loop() contents): 12345678910111213141516171819202122232425262728293031323334void loop() &#123; play(329, 200); // F-4 play(329, 70); // F-4 play(493, 100); // B-4 play(440, 200); // A-4 play(392, 200); // G-4 play(369.99, 100); // F#-4 play(369.99, 100); // F#-4 play(369.99, 120); // F#-4 play(440, 150); // A-4 play(392, 80); // G-4 play(369.99, 100); // F#-4 play(329, 150); // F-4 play(246.94, 150); // B-3 play(392, 70); // G-4 play(369.99, 70); // F#-4 play(392, 70); // G-4 play(369.99, 70); // F#-4 play(392, 70); // G-4 play(329, 150); // F-4 play(246.94, 150); // B-3 play(392, 70); // G-4 play(369.99, 70); // F#-4 play(392, 70); // G-4 play(369.99, 70); // F#-4 play(392, 70); // G-4&#125; Go ahead and paste that in and hit Run Simulation if you want to hear the coffin dance. I put in the note names in the comments besides each note so you can reference the note frequencies page above to create your own songs! The final code is available in the demo at the top of this page. If you have a syntax error or a logic error, go ahead and cross-check against that. Further Hacking This program went over the basics of how to make music; there’s a lot to be changed! See if you can mess with note durations to create chords (since Arduino does not support playing multiple notes at once), arrange your own songs, etc. If you think your creation is epic, please do share it with the Hack Club community! Here are some branches of the project that build upon the code written in this workshop: Third Piezo: demo and code All Star, by Smash Mouth: demo and code Fake Chords: demo and code","categories":[],"tags":[{"name":"workshop, memes, arduino, tinkercad, coffin dance","slug":"workshop-memes-arduino-tinkercad-coffin-dance","permalink":"http://blog.rohanbansal.me/tags/workshop-memes-arduino-tinkercad-coffin-dance/"}]},{"title":"Workshop - Templated Robot Emails","slug":"Workshop-Templated-Robot-Emails","date":"2020-09-19T23:03:58.000Z","updated":"2020-09-19T23:05:01.803Z","comments":true,"path":"2020/09/19/Workshop-Templated-Robot-Emails/","link":"","permalink":"http://blog.rohanbansal.me/2020/09/19/Workshop-Templated-Robot-Emails/","excerpt":"","text":"Robotic Emails Overview In this workshop, you’ll be using good ol’ Python to send emails using a customizable template! The project should take about 20-30 minutes to complete. Here are some links to the final code and a live demo (repl.it): Final Code: GitHub Demo: Live Prerequisites A Google account, preferably with 2FA disabled Initial SetupSMTP (Simple Mail Transfer Protocol) has been getting more and more secure as of late; and for good reason. To be able to send emails from your Google account, we need to give our python application access. Head over to this link and flick the “Allow less secure apps” lever to the on position. Google strictly allows only its own or verified software to interface with the creation/sending of emails; since you’re creating a python app, it’s necessary to tell Google that it’s acceptable. You will also need to complete this captcha to enable access for the next application that uses your credentials (this one). Quick Notes If you happen to have 2 Factor Authentication enabled for your account, please follow this article to generate an app password. When we write the program and input our account password, replace that with the app password you generated. After working on this project, it is recommended to turn the less secure apps lever back to it’s off position. File SetupHead over to repl.it and create a new Python3 project. In the sidebar, a main.py file should already be created. Go ahead and create two more files: contacts.txt message.txt The contacts.txt file will contain emails and names that will be substituted into the message body later (can be customized). Feel free to add an email and a name to it, bu make sure it’s formatted exactly as below: 1bobsmith@johndoe.com, Bob In the message.txt file, add the following template, which we will process in our python script. The first line contains the subject of the email The rest of the lines contain the body 12345678Test EmailDear &#123;0&#125;, Bacon ipsum dolor amet venison ball tip hamburger tenderloin bresaola ribeye pancetta ham chuck rump buffalo. T-bone cow pork, capicola jerky short loin prosciutto picanha porchetta ribeye. Pig ground round shank frankfurter drumstick, pork belly bresaola tongue. Pancetta alcatra bacon ground round kielbasa beef landjaeger cupim prosciutto sirloin tongue jowl.Sincerely,&lt;Your Name&gt; Please substitute &lt;Your Name&gt; with your name, as this won’t be substituted automatically in this workshop (feel free to add it in later though)! Quick Note Wondering where I got that spicy placeholder text? Check out Bacon Ipsum. Writing CodeI’ll take this moment to ask you not to copy and paste. It takes away from the learning experience (and in many cases, things need replacing). At the top of your main.py file, go ahead and add the following imports: 123import smtplibfrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMEText smtplib is a Python module used to send emails, utilizing the Simple Mail Transfer Protocol email is a Python module not used to send emails, but to manage email contents email.mime is a library that uses the global MIME internet standard to format email messages sys is a system library used to deal with file and program operations, and time is just used for delays (in our case) Next, lets create some variables to hold our credentials. 12address = 'bobsmith@johndoe.com'password = '&lt;password&gt;' Lets also initialize a connection to the Gmail SMTP mail server with those credentials. 1234mail = smtplib.SMTP('smtp.gmail.com', 587)mail.ehlo()mail.starttls()mail.login(address, password) The mail.ehlo() function is the application’s way of identifying itself to the server. More info here. The mail.starttls() function ensures that the connection is secure. More info here. Getting ContactsNow, let’s obtain our contacts from the contacts.txt file! (You don’t have to write the comments, but it’s great practice if you do) 123456789101112def get_contacts(filename): # input the contacts file contacts_list = &#123;&#125; # initialize dictionary with open(filename, mode = 'r', encoding = 'utf-8') as f: # open the contacts file, read only mode contacts = f.read().split('\\n') # split lines, add to a list f.seek(0) # look at the beginning of the file first = f.read() # read the beginning of the file if first == '': # if it's empty, there are no contacts, print error print('Contacts file is empty.') sys.exit() # exit the program for item in contacts: # iterate through contacts, add names and emails separately to a dictionary contacts_list[item.split(', ')[0]] = item.split(', ')[1:] return contacts_list # return contacts dictionary Important elements: contacts_list is a dictionary we create to hold our emails and names in key:value format with open... is a python method of opening a file, reading it to an object (in our case), and closing it immediately after. We open it in r (reading) mode, to make sure nothing is written to the file on accident utf-8 is a character encoding \\n is a newline character in Python; by splitting a file by \\n, we are essentially splitting up all the lines contacts_list[item.split(&#39;, &#39;)[0]] = item.split(&#39;, &#39;)[1:] adds the email and all the substitutions associated with that email to a dictionary. The format is key: [value, another_value, etc.] Reading the MessageGreat! You’re basically 1/3 of the way there! Add another function called read_message to the main.py file: 123456789def read_message(filename): ## input the message file with open(filename, 'r', encoding = 'utf-8') as template: #open the file in read mode template_content = template.read() # read the contents of the file to a variable template.seek(0) # look at the beginning of the file if template_content == '': # if empty, message is empty print('Message file is empty.') sys.exit() # quit program subject = template_content.splitlines()[0].rstrip() # obtain the first line (subject) by splitting all lines and indexing the first (0) return subject, '\\n'.join(template_content.split('\\n')[1:]) # return the subject and the body A few things to note: The read_message() function is really similar to the contacts function! Lets go over: 1template_content.splitlines()[0].rstrip() We split the file into multiple lines in a list. From there, we obtain the first line, which is the subject, then we strip all the spaces to the right of the text. This is to ensure there isn’t a stray \\n added by the text editor! This is also a particularly tricky part: 1'\\n'.join(template_content.split('\\n')[1:]) This line basically removes the subject line from the body of the email! Since the text is read from the message file and the subject has already been parsed, it’s not a good idea to send the subject again in the body. We split the content by newlines and keep everything after the first line; [1:] is the list operation that does this. More info here! Test out both of these functions by printing their results! Here’s how to do it: 1234contacts = get_contacts('contacts.txt')subject, template_content = read_message('message.txt')print(contacts)print(subject, template_content) After doing this, go ahead and remove the print statements, but keep the variable declarations (needed in the next section). If you get an SMTP error, you need to go back to this link and complete the captcha again. Formatting and Sending the EmailYou can format and send this email in only 12 lines of code: 1234567891011121314for contact_mail in list(contacts): msg = MIMEMultipart() msg_body = template_content.format(*tuple(contacts[contact_mail])) msg['From'] = address msg['To'] = contact_mail msg['Subject'] = subject msg.attach(MIMEText(msg_body, 'plain')) print(msg) mail.sendmail(address, contact_mail, msg.as_string()) print(\"Sent Successfully!\")mail.quit() Here’s our first occurrence of MIMEMultipart(). This, as explained at the top, manages the content of the email according to a universal internet standard. There’s more in-depth info here. Let’s remember that our contacts variable is a dictionary. We need to access both the emails and substitutions associated with them. That’s where this line comes in, and does multiple things at once: 1msg_body = template_content.format(*tuple(contacts[contact_mail])) If you noticed in the contacts.txt file, the substitution is represented by a {0} . If you’ve done Python string formatting before, you may realize that character sequence allows for replacement with the .format() function! We first obtain the list of substitutions with contacts[contact_mail] - this returns a list, as explained when we wrote the get_contacts() function tuple is an immutable data type in Python. When we write *tuple(), we unpack the list of substitutions as arguments for the format() function template_content.format() - since template_content is a string, we can use the format function to replace the {0} with custom arguments! The following chunk from above attaches the body to the email in MIME format, and sends the email! 123msg.attach(MIMEText(msg_body, 'plain'))print(msg)mail.sendmail(address, contact_mail, msg.as_string()) At this point, go ahead and run the program. Assuming your email and password are correct, and you let your application access your Google account, the program should run successfully! Go check the emails of the contacts you wrote down. The result should be similar to this: If you’re having problems, go check the final code up at the top of this page and make sure you didn’t make any errors. Further Hacking There are many things that can be changed in this program. Go back and see what you can modify to make it your own! Because of the modularity of the project, to add another substitution, it’s as simple as adding a {1} or a {2} in message.txt and adding more commas and arguments in contacts.txt. Try to think of ways to make the project even better, and please share with me or others in the Hack Club community! Here are some branches of the project that build upon the code (can also be found on GitHub) Switching Mail Servers: demo and code Easily send templated emails from multiple accounts and smtp servers! Company Sponsor Email: demo and code An example of how far you can go with this project! In retrospect, it has hundreds of usages. Multiple Messages: demo and code Multiple presets for emails, select one and send!","categories":[],"tags":[{"name":"workshop, email, python","slug":"workshop-email-python","permalink":"http://blog.rohanbansal.me/tags/workshop-email-python/"}]},{"title":"2D Game Development with Heaps.io and Haxe","slug":"Game-Development-with-Heaps-io-and-Haxe","date":"2020-07-24T17:31:03.000Z","updated":"2020-09-21T18:14:53.828Z","comments":true,"path":"2020/07/24/Game-Development-with-Heaps-io-and-Haxe/","link":"","permalink":"http://blog.rohanbansal.me/2020/07/24/Game-Development-with-Heaps-io-and-Haxe/","excerpt":"","text":"30 minutes to 1 hour read time. Get cozy with ur laptop or PC! This post is meant for people who have experience in the Haxe high-level programming language, intending to make GPU-accelerated, high performance 2 dimensional games in Heaps.io. This article details what Heaps is, how to get started, and many functions that one requires as a game developer. I will be adding my own experiences here and there for clarity. Note that this guide is only for 2D Heaps.io, 3D you will have to look elsewhere. What is Heaps.io?Heaps is a 2D + 3D game development framework with hardware graphics acceleration support. Designed to be easily portable to new platforms, Heaps currently runs on Windows, macOS, Linux, HTML5, Android, Xbox One, Playstation 4, and Nintendo Switch. The 2D API in Heaps is similar to the Flash API (the scene graph is implemented as a Display List, just like in Flash), and at the same time, in Heaps, you can work with lower-level objects (shaders, buffers, vertices, etc.); Personal Note If you’ve worked with frameworks/editors like LibGDX, Unity, or UE4, Heaps.io is a leap in a different direction. As a nitty-gritty framework, you will have to invent specific mechanics yourself that are already included in others, such as physics and a camera (Heaps actually has a built-in camera, but it isn’t very developed). Heaps.io also isn’t documented very well, but the source code is extremely legible and concise, so it almost makes up for that aspect. Many popular games like Dead Cells, Northgard, and even SpellBreak are developed in Heaps.io Haxe, so surpassing the steep learning curve is possible. Heaps.io Package StructureHeaps classes are divided into 4 categories (packages): h2d - 2D API h3d - 3D API hxd - generic classes for working with events, sounds, resources, etc. hxsl - classes related to the hxsl shader language 2D Package Base h2d.Tile - whole area or texture h2d.Sprite - Sprite, base class for displayable objects. The sprite itself cannot directly draw anything, but acts as a container for other objects h2d.Bitmap - an object that displays a texture on the screen or a specified area from a texture h2d.Text - respectively, an object that displays text on the screen 3D Package Base h3d.scene.Object - similarly to a sprite, it can act as a container for other objects in the 3d scene, but it does not itself store information about the geometry of objects on the scene h3d.Camera - a virtual camera through which you can watch the scene h3d.scene.Mesh - an object that has a geometry (for example, a cube or a sphere), as well as a material that describes how this geometry should be rendered, what shaders and textures should be used Working with 2D and 3D TogetherHere are a few similar methods both rendering structures use: To add a nested object to the scene, both for 2D and 3D use the addChild() method 2D and 3D objects have a number of properties of the same name (visible, scaleX, scaleY, name, etc.) hxd.Res - macro-based resource management subsystem. It is a virtual file system with the ability to load data from different sources (from disk, network, data embedded in the application itself) Built-in event system (input events using mouse, keyboard, gamepad, network events). System of shaders written in HxSL (Haxe Shader Language). HxSL shaders are essentially Haxe code and are directly embedded into the application code (without any quotes). Using macros, shaders are converted to the language supported on a specific target platform (glsl, hlsl, pssl). Customizable rendering with support for modern graphic effects (for example, PBR). One of the ideas that was followed when creating Heaps is that any element of it could be easily changed. Therefore, the rendering in Heaps can be completely redone for your purposes, without making any changes to the code of the engine itself. Compile TargetsAs already mentioned, Heaps can compile for different platforms: Flash (used by Stage3D API) - You should not compile to this anymore, the platform is deprecated on major browsers HTML5 (version 1.3.0 added support for WebGL 2) HashLink - A virtual machine used to run native apps. You can choose between SDL and DirectX, which are used to create the application window, draw graphics and handle events. On other desktop operating systems, only SDL is available. HashLink (and with it projects on Heaps) can also be built for modern game consoles (access to the code that provides support for these platforms is free, for access you need to contact Nicolas Cannasse). HashLink can compile to C code, making the developed game very fast. Heaps IDEsPersonal Note I recommend using Visual Studio Code to develop with Haxe and Heaps. It has a great plugin to aid debugging and development. IntelliJ IDEA and HaxeDevelop are other IDEs used to create Haxe applications. Currently, HashLink applications are profiled by profiling the C code that is output (for example, using MS Visual Studio). To work with the network, Nicolas recommends using his own hxbit library, an example of working with which is available in the examples distributed with Heaps - Network.hx. Installing and Configuring the Heaps EnvironmentAt the moment, the documentation says that Haxe version 3.4.2 or higher is required to work with Heaps. However, if you want to build a project for HashLink, then there may be incompatibilities between the Haxe and HashLink versions. Therefore, I will immediately make a reservation that when writing this material, I used the following versions of Haxe, HashLink and libraries: 123456Haxe 4.0.0-preview.4HashLink 1.7heaps 1.3.0hlsdl 1.7.0hldx 1.7.0hlopenal 1.5.0 (the audio library that hlsdl and hldx depend on) After downloading and unpacking HashLink, you need to add the path to its folder to the path system variable (otherwise you won’t be able to run hl files in VS Code). If you installed on Mac or Linux, then you’re good to go, no PATH modification necessary. Heaps can be installed either from haxelib: 1haxelib install heaps Or install from the git version of the library: 1haxelib git heaps https://github.com/HeapsIO/heaps.git A set of samples is distributed with Heaps (see the samples folder). It is highly recommended that you familiarize yourself with them for a better understanding of the library. In this article, we will be using VS Code as an editor. To work with Haxe in VS Code, use the “Haxe Extension Pack”: Setting Up a ProjectLaunch VS Code, open the project folder you created (create one if you didn’t) (File -&gt; Open folder). Create two folders: src and out at the top-level. Here are a few files you need to create: Main.hx - Place this inside the src folder.The main (and only in our case) project class inherited from hxd.App (the base class for Heaps applications): 123456class Main extends hxd.App &#123; static function main() &#123; new Main(); &#125;&#125; Note the capitalization difference for Main and main. Haxe, like any other language, is case-sensitive. build.hxml - Place this outside the src folder, at top level.The file with settings for project compilation. Set the following parameters: 1234567891011121314# imports the heaps library-lib heaps# uses SDL (Simple DirectMedia Layer), but if you're on Windows, feel free to change it to \"hldx\"-lib hlsdl# set the output path-hl out/hashlink/main.hl# set window size-D windowSize=1366x768# set window title-D windowTitle=Test App# set path where main file resides--class-path src# set main class name-main Main After creating these files, this should be your file structure: projectName—out—src——Main.hx—build.hxml Make sure the structure looks like this, then press Ctrl-Shift-B. A dialog should pop up to select a task. Select “haxe: build.hxml”, and compile the project. After that, the file main.hl should appear in the file tree inside the out/hashlink folder. If this does not happen, then this most likely means that some process is frozen and you need to restart VS Code, the easiest way to do this is by calling the “Reload window” command - for this we call the command panel (Ctrl + Shift + P), type “reload”, and press enter. Also, if your autocomplete or code jumps stop working, then most likely you just need to restart the Language Server - an auxiliary process that calls on the Haxe compiler to perform these tasks. The Language Server can also be restarted through the command bar (Ctrl + Shift + P) with the command “Haxe: Restart Language Server”. Now let’s try to automate the launch of our hl file, and for this we will create a corresponding task in the project. Press F5 and select HashLink as the environment: In the generated code, you need to correct the name of the hxml file if it does not say build.hxml. Rename it to build.hxml otherwise. Now we need to set up the default build task (Tasks -&gt; Set up default build task …) by choosing game.hxml as the task: In the generated task, you need to give it the name “Build” by adding the “label” field with the appropriate value (since a task with this name is searched for and launched before launching the application - it is set in launch.json by the “preLaunchTask” field): Having configured all the tasks, we can finally launch the application by pressing F5 - an empty window with a black background will open. Besides the fact that VS Code has support for the Haxe syntax, working with Heaps and HashLink in VS Code is also convenient because the HashLink debugger is included in the extension package. Haxe Program StructurePersonal Note If you’ve worked with other game frameworks, you may be familiar with the init() and update() methods. init() is what is called when the program starts up, and only then. It is never called after, so this function is where you create all your variables and initialize other classes. update() is called multiple times a second (anywhere from 100-500), so this is where your main game logic goes. It basically functions as a while loop, keeping the game running, updating sprites and delta time, detecting events, etc. Adding VisualsLet’s now add visual objects to the scene. Let’s add a 2d image - a Bitmap object whose constructor takes 2 parameters: tile and parent. Tile describes a certain area of ​​the Texture (many tiles can be created from one texture). In this example, we will create a tile programmatically - from a texture filled with red. Let’s add our object to a 2d scene, which is automatically created by the engine - s2d (it is a property of the main class - h2d.App, beside it, a 3d scene is created in the application - s3d): 1234567891011override function init() &#123; trace(\"Hello World!\"); var b = new h2d.Bitmap(h2d.Tile.fromColor(0xff0000, 60, 60), s2d); b.x = 50; b.y = 100; b.tile = b.tile.center(); b.rotation = Math.PI / 4;&#125; In the above code, we are centering the tile (give it an anchor point). This way all transformations of the object on the screen will be calculated relative to the center of the tile. If this method is not called, then the tile will be transformed relative to its top left point. We also rotate the tile, and the rotation is given in radians. You can also center the tile using the dx and dy properties of the tile. ColoringObjects in a 2D scene have many properties similar to those of DisplayObject in Flash, for example, color transformations can be configured as follows: 123456b.color.set(1.0, 0.0, 0.0);b.colorAdd = new h3d.Vector(0.0, 0.0, 1.0, 0.0);b.adjustColor(&#123;hue: Math.random()&#125;);b.colorKey = 0xffffffff; Let’s add dynamics - let our object change its position over time. To do this, h2d.App has an update (dt: Float) method that I mentioned earlier that’s called every frame. Let’s override it: 123override function update(dt:Float) &#123; b.rotation += 0.01;&#125; Now, if we compile the example (Ctrl-Shift-B, then f5), we will see a red rotating square. Interaction and User EventsLet’s now look at how Heaps handles user input events. In Heaps, unlike Flash, objects in the scene cannot themselves handle mouse events. For this, objects of type h2d.Interactive are created, which are added as child objects to the scene. Add the following code at the end of the init() method: 1234567891011var i = new h2d.Interactive(b.tile.width, b.tile.height, b);i.x = -0.5 * b.tile.width;i.y = -0.5 * b.tile.height;i.onOver = function(event : hxd.Event) &#123; b.alpha = 0.5;&#125; i.onOut = function(event : hxd.Event) &#123; b.alpha = 1.0;&#125; As you can see, the interactive object takes a rectangular area to detect mouse input. The event detection is a handler system, with the function assigned to the event being called every time the mouse activates that event. Now, when you hover the mouse over the red square, it will become semi-transparent, and when you move the mouse out, it will become opaque again. In order to override the behavior of an Interactive object (the area in which mouse events are triggered), you can override its onCheck() method.Also in Heaps, instead of a rectangular validation area, you can set it to an ellipse-shaped area; for this, the Interactive object has a boolean property isEllipse. Handling keyboard button clicks: 12345678override function update(dt:Float) &#123; if (hxd.Key.isDown(hxd.Key.RIGHT)) &#123; g.x++; &#125; else if (hxd.Key.isDown(hxd.Key.LEFT)) &#123; g.x--; &#125;&#125; To organize work with different tasks, the hxd.WaitEvent class has been added to Heaps, which executes the function passed to it until it returns true. Also, WaitEvent has several predefined functions, for example, for deferred method invocation: 123456789101112131415161718var w:hxd.WaitEvent;override function init() &#123; w = new hxd.WaitEvent(); w.wait(2, function() &#123; trace(\"Kept you waiting, huh?\"); &#125;); w.add(everyFrameRoutine);&#125;override function update(dt:Float) &#123; w.update(dt);&#125;function everyFrameRoutine(dt:Float):Bool &#123; trace(\"everyFrameRoutine\"); return false;&#125; Images and TexturesLet’s try to use an image as a texture. Add a folder “res” to the project (by default, a folder with this name is used as a resource store, but if necessary, the folder name can be redefined in the project by setting the resourcesPath compilation flag as such: -D resourcesPath=assets/). This should be the folder structure of the project now, after adding this image to the assets folder: projectName—assets——logo.png—out——hashlink———main.hl—src——Main.hx—build.hxml Note how the above structure omits the .vscode folder, this is intentional, do not delete that folder. Now, change this line of code: 1b = new h2d.Bitmap(h2d.Tile.fromColor(0xff0000, 60, 60), s2d); To this: 1b = new h2d.Bitmap(hxd.Res.logo.toTile(), s2d); In the above sample, we are calling hxd (the underlying heaps library) to access the resources folder designated, find the PNG with the name “logo”, and convert it to a tile. Resource Management System BackendDue to the fact that the resource management system is based on macros, the names of files with resources do not need to be specified as strings - they become fields of the hxd.Res class, which avoids typos in file names (messages about such errors are displayed at the compilation stage of the application). In addition, based on file extensions, the resource system independently determines the type of resource (for example, jpg and png are processed as images). The table of correspondence between file extensions and resource types is defined in the hxd.res.Config class and can be changed because is a public variable: 12345678910111213public static var extensions = [ \"jpg,png,jpeg,gif,tga\" =&gt; \"hxd.res.Image\", \"fbx,hmd\" =&gt; \"hxd.res.Model\", \"ttf\" =&gt; \"hxd.res.Font\", \"fnt\" =&gt; \"hxd.res.BitmapFont\", \"wav,mp3,ogg\" =&gt; \"hxd.res.Sound\", \"tmx\" =&gt; \"hxd.res.TiledMap\", \"atlas\" =&gt; \"hxd.res.Atlas\", \"grd\" =&gt; \"hxd.res.Gradients\", #if hide \"prefab,fx,l3d\" =&gt; \"hxd.res.Prefab\" #end]; In an extreme case, resources can be loaded by file name, but the typing of resources is lost and you need to independently convert the resulting resource to its type: 1hxd.Res.load(\"logo.png\").toImage().toTile(); You can also create a resource from a byte array and cast it to the required type: 1hxd.res.Any.fromBytes(...); But in order for the texture to actually load, it is necessary to initialize the resource system. This is done before calling the application constructor at the beginning of the app. Place the following line of code before calling new Main() in the main() method, and replace the BitMap declaration: 12345678910111213class Main extends hxd.App &#123; var b:h2d.Bitmap; static function main() &#123; hxd.Res.initLocal(); new Game(); &#125; override function init() &#123; b &#x3D; new h2d.Bitmap(hxd.Res.load(&quot;haxeLogo.png&quot;).toImage().toTile(), s2d); ... &#125; In this example, we are calling the Res.initLocal() method, which means that resources will be read from the local disk system as separate files. In addition to this method, methods are available: initEmbed() - all resources will be embedded in the application file; initPak() - resources will be packed into pak files (resource archives that can be grouped according to some attribute, for example, resources of a certain game level). In addition, you can independently determine how resources will be loaded (for example, over the network). Heaps implements a live reload mechanism for resources, which is activated by the pipeline (before initializing the resource system): 1hxd.res.Resource.LIVE_UPDATE = true; And to process resource changes, you need to assign a callback, which will be called at the same time: 1hxd.Res.logo.entry.watch(changeCallback); Here the entry property of hxd.Res.logo is an object of the virtual file system, with which the resource system works as an abstraction. Entry has its own interface, with which you can determine if entry is a folder or file, read its bytes, etc. It should also be said that in Heaps unused resources are automatically removed from memory, but there are also manual methods for destroying them, for example, tiles have a dispose() method that removes the texture it uses from memory. Text Processing and DisplayHere are a few more important classes based around text processing: For buttons and other “stretching” elements (using 9 slice), Heaps has the h2d.ScaleGrid class. The h2d.Flow component can be used for layout elements. Text rendering can be done either using the h2d.Text class, or using h2d.HtmlText, which supports markup using html tags. An inputable text field is implemented in the h2d.TextInput class. In these classes, BitMap fonts are used as fonts, which can be prepared, for example, in the bmfont program (on the net you can find many of its counterparts with a wide range of capabilities). Also, if the target platform is Flash, JS or Lime (not officially supported), then BitMap fonts can be generated programmatically from vector using the hxd.res.FontBuilder class: 1var fnt = hxd.res.FontBuilder.getFont(\"Verdana\", 24); Here’s the simplest example of using the h2d.Text class (place this in the init() function): 1234var t = new h2d.Text(hxd.res.DefaultFont.get(), s2d);t.scale(10);t.text = \"Hello Haxe\"; This created a Text object with the default font, attaches it to the 2D scene, scales it up by 10, and sets the text. Building/running the project again shows the text in the window. h2d.HtmlText inherits from h2d.Text and working with it is no different: 1234var t = new h2d.HtmlText(hxd.res.DefaultFont.get(), s2d);t.scale(10);t.text = \"Hello &lt;font color='#ff0000'&gt;Haxe&lt;/font&gt;\"; h2d.InputText adds the ability to handle text input from the keyboard, as well as the ability to get information about the selected text fragment (using the cursorIndex and selectionRange properties): 1234var t = new h2d.TextInput(hxd.res.DefaultFont.get(), s2d);t.scale(10);t.text = \"Input Here\"; Tile BatchingNext up, tile batching! There are 2 classes for batching tiles in Heaps: h2d.TileGroup - for static groups whose elements do not change their relative position h2d.SpriteBatch - for dynamic groups An example of using h2d.TileGroup: 12345678910111213141516var g:h2d.TileGroup;override function init() &#123; var tiles = hxd.Res.logo.toTile().gridFlatten(10, 0, 0); g = new h2d.TileGroup(tiles[0], s2d); g.blendMode = None; for (i in 0...1000) &#123; g.add(Std.random(s2d.width), Std.random(s2d.height), tiles[i % tiles.length]); &#125;&#125;override function update(dt:Float) &#123; g.rotation += 0.01;&#125; Since the TileGroup class is optimized for rendering static elements, transformations of the entire group cost almost nothing in terms of performance! That is, you can change the position, scale, and rotation of the group without slowing down the application speed, no matter how many elements there are. Consider creating simple 2d animations using the h2d.Anim class: 12var animationSpeed = 15;b = new h2d.Anim(hxd.Res.logo.toTile().split(10, false), animationSpeed, s2d); Here we split the texture into 10 horizontal frames, set the animation speed and add an animated sprite to the scene. Of course, for an animated sprite, you can manually change the animation speed, set the current frame, pause the animation, etc. (in general, do whatever is expected of animation): 123b.currentFrame = 1;b.pause = true;b.speed = 10; Shape Rendering / Geometric PrimitivesTo draw geometric primitives in Heaps, such as shapes, objects of the h2d.Graphics type are used (there is also h3d.scene.Graphics, which works with a 3D scene), which are similar to flash.display.Graphics in Flash, but at the same time are an element of the scene, and not a property of sprites: 123456789var g:h2d.Graphics;override function init() &#123; g = new h2d.Graphics(s2d); g.beginFill(0xff00ff, 0.5); g.drawCircle(150, 150, 100); g.endFill()&#125; At the same time, unlike OpenFL (another Haxe game development library), all primitives are rendered entirely by means of the GPU, without consuming additional memory, and are also stored in a buffer (that is, each frame is not recalculated). Done!Hopefully after going through this guide, you’ve become more acquainted and proficient with 2D Heaps.io. With a library like this, understanding the documentation can be critical to your game, and I hope I’ve cleared some things up. Have fun with game development! Feel free to share any cool projects with me at bansalrohan18@gmail.com.","categories":[],"tags":[{"name":"game_development, heaps.io, haxe, 2d","slug":"game-development-heaps-io-haxe-2d","permalink":"http://blog.rohanbansal.me/tags/game-development-heaps-io-haxe-2d/"}]},{"title":"My Experience Theming Windows 10","slug":"My-Experience-Theming-Windows-10","date":"2020-07-03T06:06:41.000Z","updated":"2020-09-21T18:14:33.968Z","comments":true,"path":"2020/07/02/My-Experience-Theming-Windows-10/","link":"","permalink":"http://blog.rohanbansal.me/2020/07/02/My-Experience-Theming-Windows-10/","excerpt":"","text":"I recently dove into the world of Windows 10 theming, and thought I should share my experience. I am running the following at the time of writing: Windows 10 (dual boot with Linux) Version 1909 Build #18363.900 Compared to Linux, Windows has been restricted in many aspects, including customization. You can only change a few desktop tones and colors, and the rest is hidden behind a registry which requires a lot of tweaking to get to. Most of this can’t be done by hand, because Windows designed that part to only be done by it’s own programs, and is therefore very hard to read. There also aren’t that many tutorials out there on how to theme Windows with a patcher, so you can use this post as a torch! I’ll include links to everything so you can check them out yourself. Quick Word of CautionTheming Windows is fun and can have a great end result, but I suggest creating a system restore point before continuing. If anything goes wrong, you can always restore to that and have nothing to worry about. How I Got StartedI stumbled upon this post while browsing DeviantArt one day! The user who posted that theme (niivu) has created a few different Windows themes, and that’s how I learned what tools to use and where. UltraUXThemePatcher OldNewExplorer StartIsBack WinAeroTweaker The tools above are recommended in various places, and I’ll tell you what I think of each. UltraUXThemePatcherlink: ultrauxthemepatcher A UX patcher in Windows is very similar to the GNOME tweak tool in Debian Linux distros, except it specializes in breaking open the theming capabilities of Windows. Many of the guides online for Windows theming say to use this patcher, but DO NOT USE IT. SecureUXThemePatcher is a better patcher that allows you to theme without modifying system files. It also fixes a few bugs found in UltraUXThemePatcher, such as a few colors reverting to their defaults randomly. How I Used It Patched the Nord theme onto Windows OldNewExplorerlink: oldnewexplorer OldNewExplorer is a tweak for Windows that makes the file explorer extremely customizable. Here’s a list of the things it can do: Restore device/drive grouping (moving things from devices/drives section) Remove unused folders that were added in Windows 8 that no one uses Remove the ribbon (most useful!) Restore the details pane at the bottom of the explorer Improve styling capabilities How I Used It The ribbon remover was particularly unhelpful, it didn’t get rid of the ribbon for me. I used this tool instead. Removed the quick access folder Reordered drive groups StartIsBacklink: startisback After glancing at the site above, you may be thinking ewww thats old, Windows 10 start menu was better, you’re partially right. Using StartIsBack by itself without theming anything does not look great at all. However, with some styling changes, it can look better than the Windows 10 one! How I Used It Modified the original Windows 10 start menu into a Nord theme Minimalized the dock WinAeroTweakerlink: winaerotweaker WinAeroTweaker is a small application that is actually pretty powerful. It contains a huge variety of tweaks that can change the Windows experience drastically. How I Used It Shrinking taskbar size Reordering taskbar widgets Resizing desktop shortcuts Tutorial: Patching a Nord themeThis following section will walk you through changing the Windows scheme to match this. We will change the start menu, the file explorer, system icons, system theme, taskbar, and even music player! Stay tuned for this section, currently WIP","categories":[],"tags":[{"name":"windows, ricing, theme, uxpatcher","slug":"windows-ricing-theme-uxpatcher","permalink":"http://blog.rohanbansal.me/tags/windows-ricing-theme-uxpatcher/"}]},{"title":"Compiling Aseprite for Linux","slug":"Compiling-Aseprite-for-Linux","date":"2020-05-25T06:15:48.000Z","updated":"2020-09-21T18:15:05.291Z","comments":true,"path":"2020/05/24/Compiling-Aseprite-for-Linux/","link":"","permalink":"http://blog.rohanbansal.me/2020/05/24/Compiling-Aseprite-for-Linux/","excerpt":"","text":"This post details my experience compiling Aseprite (the most popular pixelart editor) for Ubuntu. It was poorly documented, so I aim to be as concise as possible so those reading have no trouble. That being said, this guide is for compiling Aseprite on Linux, not Windows. Windows has a few extra steps, and I’ll link a handy guide here. Compiling ToolsOn Linux, Aseprite requires the following packages: g++ cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev Install them with your package manager of choice. For example, on Ubuntu: 1sudo apt-get install -y g++ cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev You also need CMake version 3.14 or higher. To check, run: 1cmake --version Next, the Ninja build system is needed. Here are a few installation methods by distro: Arch: pacman -S ninja Debian/Ubuntu: apt-get install ninja-build Fedora: dnf install ninja-build SkiaLast but not least, you will need both depot_tools and the Skia graphics library. There are two methods, compiling Skia from source or downloading a prebuilt binary. Compiling From SourceThe following script creates a dep folder in your root directory to store both packages in. Note that compiling Skia will take a while, depending on the machine. 123456789mkdir $HOME/depscd $HOME/depsgit clone https://chromium.googlesource.com/chromium/tools/depot_tools.gitgit clone -b aseprite-m81 https://github.com/aseprite/skia.gitexport PATH=\"$&#123;PWD&#125;/depot_tools:$&#123;PATH&#125;\"cd skiapython tools/git-sync-depsgn gen out/Release-x64 --args=\"is_debug=false is_official_build=true skia_use_system_expat=false skia_use_system_icu=false skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false\"ninja -C out/Release-x64 skia modules Prebuilt BinaryBefore downloading anything, run: 1mkdir ~/deps ~/deps/skia This ensures the binary is easily accessible by the aseprite install script detailed later in the article. Feel free to change the path, but remember to change the directory in the install script as well. Then, go ahead and download the release. Make sure the branch is Skia-m81. After downloading, extract the contents into the deps/skia directory. Compiling AsepriteNow, you have to pull the official GitHub repository for Aseprite. 1git clone --recursive https://github.com/aseprite/aseprite.git The line above will create a folder called aseprite in the directory you ran the command in. I recommend creating it in your root directory, but it shouldn’t matter where. For future reference, to update Aseprite, run the following commands: 123cd asepritegit pullgit submodule update --init --recursive Next, you have to create a build directory to store compile output and the generated Aseprite binary. Modify the first command below if you cloned Aseprite in a different location. 123cd ~/asepritemkdir buildcd build There are only a few more commands to get Aseprite working! Next up is compilation with CMake. Remember, if you decided to install Skia in another location, replace $HOME/deps/skia with that path. 1234567cmake \\ -DCMAKE_BUILD_TYPE=RelWithDebInfo \\ -DLAF_BACKEND=skia \\ -DSKIA_DIR=$HOME/deps/skia \\ -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \\ -G Ninja \\ .. Finally, run this to compile the Aseprite binary: 1ninja aseprite There you have it! After the compilation finishes, navigate to aseprite/build/bin and you should see the aseprite file. You can run it in terminal with: 1./aseprite However, for ease of access, you may want to launch it from the applications menu or the dock. The next section explains the process of creating a desktop file to do this. Installing Aseprite GloballyTo install Aseprite system-wide, you need to make use of the .desktop file format. For example, this is my entry for Aseprite, installed in /usr/share/applications: aseprite.desktop 1234567891011121314[Desktop Entry]X-AppInstall-Package=asepriteX-AppInstall-Popcon=0X-AppInstall-Section=universeName=ASEPRITEComment=Sprite EditorExec=asepriteIcon=asepriteTerminal=falseType=ApplicationCategories=Graphics;2DGraphics;RasterGraphics;X-Ubuntu-Gettext-Domain=app-install-data As arguments for this file differ based on distribution, we’ll use the alacarte package. This program is available in most package repositories, like the AUR and apt. To install on Ubuntu, run: 1sudo apt-get install -y alacarte After installation, run the command alacarte in a terminal, and a GUI should pop up. In the left sidebar, click “Graphics”. From here, the “New Item” button in the right sidebar should be clickable. A new GUI should pop up, and you can fill in details such as the name of the program (Aseprite), and the command to be run. For the command, click “Browse”, navigate to ~/aseprite/build/bin/ (or wherever you installed it), and click the aseprite binary. Once you close the file chooser, the input prompt section should be filled with a command ending with “aseprite”. Finally, add a comment and an icon (if you want to), and save. If you want the icon to be the official Aseprite icon, navigate to ~/aseprite/data/icons, which has a few images to choose from. Done!Aseprite should now be accessible when searching the applications menu. It should also be pinnable to the dock. I hope this article helped, and good luck on your pixelart journey!","categories":[],"tags":[{"name":"linux, source, aseprite, pixelart","slug":"linux-source-aseprite-pixelart","permalink":"http://blog.rohanbansal.me/tags/linux-source-aseprite-pixelart/"}]}],"categories":[],"tags":[{"name":"workshop, memes, arduino, tinkercad, coffin dance","slug":"workshop-memes-arduino-tinkercad-coffin-dance","permalink":"http://blog.rohanbansal.me/tags/workshop-memes-arduino-tinkercad-coffin-dance/"},{"name":"workshop, email, python","slug":"workshop-email-python","permalink":"http://blog.rohanbansal.me/tags/workshop-email-python/"},{"name":"game_development, heaps.io, haxe, 2d","slug":"game-development-heaps-io-haxe-2d","permalink":"http://blog.rohanbansal.me/tags/game-development-heaps-io-haxe-2d/"},{"name":"windows, ricing, theme, uxpatcher","slug":"windows-ricing-theme-uxpatcher","permalink":"http://blog.rohanbansal.me/tags/windows-ricing-theme-uxpatcher/"},{"name":"linux, source, aseprite, pixelart","slug":"linux-source-aseprite-pixelart","permalink":"http://blog.rohanbansal.me/tags/linux-source-aseprite-pixelart/"}]}